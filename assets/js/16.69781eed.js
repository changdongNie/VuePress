(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{349:function(s,t,a){"use strict";a.r(t);var n=a(3),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[s._v("#")]),s._v(" 运算符")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("类别")]),s._v(" "),a("th",[s._v("运算符")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("逻辑运算符")]),s._v(" "),a("td",[s._v("& |^ ~ && || !")])]),s._v(" "),a("tr",[a("td",[s._v("递增和递减")]),s._v(" "),a("td",[s._v("++ --")])]),s._v(" "),a("tr",[a("td",[s._v("空值条件运算符")]),s._v(" "),a("td",[s._v("?. ?[]")])]),s._v(" "),a("tr",[a("td",[s._v("标识符的名称运算符")]),s._v(" "),a("td",[s._v("nameof()")])]),s._v(" "),a("tr",[a("td",[s._v("条件运算符（三元运算符）")]),s._v(" "),a("td",[s._v("?:")])]),s._v(" "),a("tr",[a("td",[s._v("类型信息运算符")]),s._v(" "),a("td",[s._v("sizeof is   typeof as")])]),s._v(" "),a("tr",[a("td",[s._v("溢出异常控制运算符")]),s._v(" "),a("td",[s._v("checked unchecked")])]),s._v(" "),a("tr",[a("td",[s._v("命名空间别名限定符")]),s._v(" "),a("td",[s._v("::")])]),s._v(" "),a("tr",[a("td",[s._v("空合并运算符")]),s._v(" "),a("td",[s._v("??")])])])]),s._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//++x和x++的区别，")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Main方法中")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'true，x先增加后比较'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'false ,x先比较后增加'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"_1-条件运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-条件运算符"}},[s._v("#")]),s._v(" 1.条件运算符")]),s._v(" "),a("p",[a("strong",[s._v("概念：")]),s._v(" 条件运算符（?:)也称为三元运算符，是if..else结构的简化形式。")]),s._v(" "),a("p",[s._v("condition ? true_value : false_value")]),s._v(" "),a("h3",{attrs:{id:"_2-checked和unchecked运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-checked和unchecked运算符"}},[s._v("#")]),s._v(" 2. checked和unchecked运算符")]),s._v(" "),a("p",[s._v("概念：例如byte数据类型只能包含0~255的数，如果给byte类型一个255的数，该数值自增会导致溢出得到0，CLR处理这个溢出取决于许多因素，c#提供了checked和unchecked运算符，如果把一个代码块标记为checked，CLR就会执行溢出检查，如果禁止溢出检查，可以把代码标记为unchecked。")]),s._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("checked")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这段代码会抛出异常OverflowException异常")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("注意")]),s._v(" unchecked是默认的行为，默认不检查上溢出和下溢出，因为执行检查会影响性能，每一个算术运算符的结果都需要验证其值是否越界。")]),s._v(" "),a("h3",{attrs:{id:"_3-is运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-is运算符"}},[s._v("#")]),s._v(" 3. is运算符")]),s._v(" "),a("p",[a("strong",[s._v("概念")]),s._v(" is运算符可以检查对象是否与特定的类型兼容，兼容表示对象或者是该类型，或者派生自该类型。")]),s._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//c#7 扩展了具有类型匹配的is运算符，可以检查常量，类型和var，")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i has the value 42"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),s._v(" o"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Conosle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"o is null"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用具有类型匹配的is运算符，可以在类型的右边声明变量，如果is运算符返回true，则该变量通过对该类型的对象的引用来填充。然后可以使用is运算符的if语句范围内使用该变量。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("AMethodUsingPatternMathching")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),s._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"o is a Person with firstname { p.FirstName}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("AMethodUsingPatternMathching")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Katharina"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Nagel"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h3",{attrs:{id:"_4-as运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-as运算符"}},[s._v("#")]),s._v(" 4. as运算符")]),s._v(" "),a("p",[a("strong",[s._v("概念：")]),s._v(" as运算符用于执行应用类型的显示类型转换。如果要转换的类型与指定的类型兼容，转换就会成功进行，如果类型不兼容，as运算符就会返回null值。as运算符允许在一步中进行安全的类型转换，不需要先使用is运算符测试类型，在执行转换。")]),s._v(" "),a("h3",{attrs:{id:"_5-sizeof运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-sizeof运算符"}},[s._v("#")]),s._v(" 5. sizeof运算符")]),s._v(" "),a("p",[a("strong",[s._v("概念")]),s._v(" 使用sizeof运算符可以确定栈中值类型需要的长度（单位是字节），类不能使用sizeof运算符。类不能使用sizefo运算符。")]),s._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[s._v("Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//输出4，int占4个字节")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_6-typeof运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-typeof运算符"}},[s._v("#")]),s._v(" 6. typeof运算符")]),s._v(" "),a("p",[a("strong",[s._v("概念")]),s._v("：typeof运算符返回一个表示特定类型的System.Type对象。例如，typeof(string) 返回表示System.String类型的Type对象，在使用反射技术动态地查找对象的相关信息。")]),s._v(" "),a("h3",{attrs:{id:"_7-nameof运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-nameof运算"}},[s._v("#")]),s._v(" 7. nameof运算")]),s._v(" "),a("p",[a("strong",[s._v("概念：")]),s._v(" 是一个c#6运算符，该运算符接受一个符号、属性和方法，并返回其名称。nameof运算符也可以用来得到方法的名称。如果方法是重载的，因为所有的重载版本都得到相同的值：方法名称。")]),s._v(" "),a("h3",{attrs:{id:"_8-index运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-index运算符"}},[s._v("#")]),s._v(" 8.index运算符")]),s._v(" "),a("p",[a("strong",[s._v("概念")]),s._v(" 类似于数组元素，索引运算符用集合类实现。索引运算符不需要把整数放在括号内，并可以用任何类型定义。")]),s._v(" "),a("h3",{attrs:{id:"_9-可空类型和运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-可空类型和运算符"}},[s._v("#")]),s._v(" 9.可空类型和运算符")]),s._v(" "),a("p",[a("strong",[s._v("概念：")]),s._v(" 值类型和引用类型的一个重要区别是，引用类型可以为空。值类型不能为空。把c#类型映射到数据库类型时，这是一个特殊的问题。数据库中的数值可以为空。每个结构可以定义为可控类型")]),s._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?")]),s._v(" i2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?")]),s._v(" i3"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?")]),s._v(" ii"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//b=null")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//c=null")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_10-合并运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-合并运算符"}},[s._v("#")]),s._v(" 10.合并运算符")]),s._v(" "),a("p",[a("strong",[s._v("概念：")]),s._v(" 空合并运算符（??）提供了一种快捷方式，可以在处理可控类型和引用类型时表示null值的可能性。这个运算符放在两个操作数之间，第一个操作数必须是一个可空类型或引用类型；第二个操作数必须与第二个操作数的类型相同，或者可以隐式的转换为第一个操作数的类型。")]),s._v(" "),a("p",[s._v("1.如果第一个操作数不是null，整个表达式就等于第一个操作数的值")]),s._v(" "),a("p",[s._v("2.如果第一个i额操作数是null，整个表达式等于第二个操作数的值。")]),s._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v(" _val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v(" Val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" _val"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("??")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_val"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_11-空值条件运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-空值条件运算符"}},[s._v("#")]),s._v(" 11.空值条件运算符")]),s._v(" "),a("p",[a("strong",[s._v("概念：")]),s._v(" c#中减少大量代码行的一个功能是空值条件运算符。当表达式左边为空时，就只返回null，而继续执行表达式右侧。")]),s._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ShowPerson")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" firstName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?.")]),s._v("FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用空值条件运算符访问int类型的属性时，不能把结果直接分配给int类型，因为记过可为空")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?")]),s._v(" age1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?.")]),s._v("Age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//也可以使用空合并运算符，定义另一个结果，以防止左边的结果为空")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?.")]),s._v("Age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("??")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//检查对象属性时，判断空值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("GetPerson")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" city"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("HomeAddress"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    city"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("HomeAddress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("City"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用空值条件运算符会更简单")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" city"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?.")]),s._v("HomeAddress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?.")]),s._v("City"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h3",{attrs:{id:"运算符优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符优先级"}},[s._v("#")]),s._v(" 运算符优先级")]),s._v(" "),a("p",[s._v("在复杂的表达式中，应避免利用运算符优先级来生成正确的结果，使用圆括号制定运算符的执行顺序，可以使代码整洁，避免出现潜在的冲突")]),s._v(" "),a("h3",{attrs:{id:"类型的安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型的安全"}},[s._v("#")]),s._v(" 类型的安全")]),s._v(" "),a("p",[a("strong",[s._v("概念")]),s._v(" 中间语言（IL)可以对其代码强制实现强类型的安全性。强类型支持.NET提供的许多服务，包括安全性和语言的交互性。因为c#语言会编译为IL，所以c#也是强类型。")]),s._v(" "),a("h3",{attrs:{id:"装箱拆箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装箱拆箱"}},[s._v("#")]),s._v(" 装箱拆箱")]),s._v(" "),a("p",[s._v("简单预定义类型和复杂类型，装箱（boxing）可以把值类型转换城引用类型，拆箱（unboxing）把引用类型转换为值类型。")]),s._v(" "),a("h2",{attrs:{id:"比较对象的相等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较对象的相等性"}},[s._v("#")]),s._v(" 比较对象的相等性")]),s._v(" "),a("p",[a("strong",[s._v("概念")]),s._v(" 对象想等到机制有所不同，这取决于比较的是引用类型（类实例）还是值类型（基本数据类型，枚举或结构的实例）")]),s._v(" "),a("h4",{attrs:{id:"_1-比较引用类型的相等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-比较引用类型的相等性"}},[s._v("#")]),s._v(" 1.比较引用类型的相等性")]),s._v(" "),a("p",[s._v("System.Object定义了3个不同的方法来比较对象的相等性：ReferenceEquals()和两个版本的Equals():一个是静态方法，一个是可以重写的虚拟实例方法。还可以实现接口"),a("code",[s._v("IEquality<T>")]),s._v(",提供了一个具有泛型类型参数而不是对象Equals方法。再加上比较运算符==。")]),s._v(" "),a("p",[a("strong",[s._v("ReferenceEquals()方法")]),s._v("：")]),s._v(" "),a("p",[s._v("是一个静态方法，其测试两个引用是否指向类的同一个实例，特别的是两个引用是否包含内存中的相同地址，作为静态方法，它不能重写，所以System.Object是实现代码保持不变，如果提供的两个应用指向同一个对象实例，则ReferenceEquals()总是返回true；否则就返回false。但是它认为null等于null")]),s._v(" "),a("p",[a("strong",[s._v("Equals()虚方法")]),s._v("：")]),s._v(" "),a("p",[s._v("Equals()虚版本的System.Object实现代码也可以比较引用，但因为是虚方法，所以可以在自己的类中重写它，从而按值来比较对象，特别是如果希望实例用作字典中的键，就需要重写这个方法，以比较相关值，否则，根据重写Object.GetHashCode()的方式，包含对象都字典累要么不工作，要么工作的效率非常低，在重写Equals()方法时要注意，重写的代码不应抛出异常，问题，这个因为抛出异常，字典累就会出问题，一些在内部调用这个方法的.NET基类也可能出问题。")]),s._v(" "),a("p",[a("strong",[s._v("静态Equals()方法")])]),s._v(" "),a("p",[s._v("Equals()的静态版本和虚拟实例版本的作用相同，其区别是静态版本带有两个参数，并对它们进行相等性比较，这个方法可以处理两个对象中有一个是null的情况；因此，如果一个对象可能是null，这个方法就可以抛出异常，提供额外的保护，静态重载版本首先检查传递给它的引用是否为null，如果它们都是null，就返回true(因为null与null相同)，如果只有一个引用是null，他就返回false，如果两个引用实际上引用了某个对象，它就调用Equals()的虚拟实例版本，这表示在重写Equals()的实例版本时，相当于也重写了静态版本。")]),s._v(" "),a("p",[a("strong",[s._v("比较运算符==")])]),s._v(" "),a("p",[s._v("最好将比较运算符看作严格的值比较和严格的引用比较之间的中间选项。在大多数情况下，比较引用")]),s._v(" "),a("p",[a("code",[s._v("bool b=(x==y)//x,y Object referenes 对象引用")]),s._v("。如果看作值，含义就比较直观，在特殊情况下，最好重写比较运算符，以执行值的比较。System.String 类，重写了这个运算符，以比较字符串的内容，而不是比较它们的引用。")]),s._v(" "),a("h2",{attrs:{id:"比较值类型的相等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较值类型的相等性"}},[s._v("#")]),s._v(" 比较值类型的相等性")]),s._v(" "),a("p",[a("strong",[s._v("概念")]),s._v(" 在比较值类型的相等性时，采用与引用类型的相同规则：ReferenceEquals()引用，Equals()用于此比较值，比较运算符可以看作一个中间项，但最大的区别的值类型需要装箱，才能把它们转换为引用，进而才能对它们执行方法，另外，Microsoft已经在System.ValueType类中重载了实例方法Equals(),以便对值类型进行合适的相等性测试。如果调用sA.Euqals(sB),其中sA和sB是某个结构的实例，则根据sA和sB是否在所进行的字段中包含相同的值而返回true和false，另一方面，在默认情况下，根据sA和sB是否在所有表达式用（sA==是B）会导致一个编译异常。")]),s._v(" "),a("p",[s._v("ReferenceEquals()在应用于值类型时总是返回false，因为为了调用这个方法，值类型需要装箱到对象中 "),a("code",[s._v("bool b=ReferenceEquals(v,v )")]),s._v(" //v 因为在转换每个参数时，v都会被单独装箱，意味着会得到不同的引用。")]),s._v(" "),a("p",[s._v("System.ValueType提供Equals()默认重写版本能够应付绝大多数自定义的结构，但仍需针对自己的结构再次重写它以提高性能。如果值类型包含作为字段的引用类型，就需要重写Equals(),以便为这些字段提供合适的语义，因为默认仅比较它们的地址。")]),s._v(" "),a("h2",{attrs:{id:"运算符重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符重载"}},[s._v("#")]),s._v(" 运算符重载")]),s._v(" "),a("p",[a("strong",[s._v("概念：")]),s._v(" 为类或结构定义的另一种类型的成员：运算符重载。")]),s._v(" "),a("p",[a("strong",[s._v("定义：")]),s._v(" 运算符重载的声明方式和静态方法基本相同，但operator关键字告诉编辑器。它实际上是一个自定义的运算符重载，后面是相关运算符的实际符号。")]),s._v(" "),a("p",[a("strong",[s._v("要求：")]),s._v(" c#要求所有的运算符重载都声明为public和static，这表明它们与其类或结构的关联，而不是某个特定实例相关联，所以运算符的代码本体不能访问非静态类成员，也不能访问this标识符，因为参数提供了运算符执行其任务所需要直到的所有输入数据。")]),s._v(" "),a("h2",{attrs:{id:"重载算数运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载算数运算符"}},[s._v("#")]),s._v(" 重载算数运算符")]),s._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[s._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" Vector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Vector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        X"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        Y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        Z"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Vector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vector")]),s._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        X"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        Y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        Z"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" Z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ToString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{X},{Y},{Z}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//main方法")]),s._v("\n          "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vector")]),s._v(" vector1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" vector2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("vector3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            vector1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            vector2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            vector3"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("vector1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("vector2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//调用重载的方法")]),s._v("\n            Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("vector3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ToString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[a("strong",[s._v("注意：")]),s._v(" 虽然+=一般计为单个运算符，但实际上它对应的操作分为两步：相加和赋值。与c++语言不同，C#不允许重载=运算符；但如果重载+运算符，编辑器会自动使用+运算符的重载来执行 +=运算符操作，-=  *= /= 和&=等所有赋值运算符也遵循此原则。")]),s._v(" "),a("h2",{attrs:{id:"重载比较运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载比较运算符"}},[s._v("#")]),s._v(" 重载比较运算符")]),s._v(" "),a("p",[s._v("c#中六个比较运算符：")]),s._v(" "),a("p",[s._v("==和!=  >和< >=和<=")]),s._v(" "),a("p",[a("strong",[s._v("注意：")]),s._v(" 在比较两个对象时，如果==运算符返回true，就总是返回true，所以不应改变的类型上只重载==运算符。如果重载了==就必须重载!=,否则编译错误，比较运算符必须返回布尔类型的值。")]),s._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vector")]),s._v(" left "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vector")]),s._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//比较两个对象的引用地址，System.Object提供的方法，")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//浅比较是比较对象是否指向内存中的同一位置。")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ReferenceEquals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("retrun "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//深度比较是比较对象的值和属性是否相等。")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("X"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("X"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Y"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Z"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vector")]),s._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Vector")]),s._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("left"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("注意：")]),s._v(" 不要通过调用System.Object 中继承的Equals()方法的实力版本来重载比较运算符，如果这么做，在objA是null时判断（objA==ojbB),就会产生一个异常，因为.NET运行库会试图判断null.Equals(objB)。采用其他方法重写Equals()方法比较运算符比较安全。")]),s._v(" "),a("p",[a("strong",[s._v("注意")]),s._v(" 现在Equals和GetHashCode方法，这个方法总是在重写==运算符时进行重写，否则编辑器会报错。")]),s._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//重写Equals")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Vector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//重写GetHashCode")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("GetHashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("GetHashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("GetHashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("Z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("GetHashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"实现自定义的索引运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现自定义的索引运算符"}},[s._v("#")]),s._v(" 实现自定义的索引运算符")]),s._v(" "),a("p",[a("strong",[s._v("定义")]),s._v(" 索引器看起来非常类似于属性，有哪位它包含get和set访问器，两者的不同之处。指定索引使用this关键字。this关键字后面的括号制定索引使用的类型。索引定义任何类型都是有效的。")]),s._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" FirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" LastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("FirstName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LastName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("lastName；\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PersonCollection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" _people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("PersonCollection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("params")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v("\n        _people"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ToArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//定义索引")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v("_people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v("_people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h2",{attrs:{id:"用户定义类型强制转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户定义类型强制转换"}},[s._v("#")]),s._v(" 用户定义类型强制转换")]),s._v(" "),a("h4",{attrs:{id:"显示强制转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显示强制转换"}},[s._v("#")]),s._v(" 显示强制转换")]),s._v(" "),a("p",[s._v("对预定义的数据类型，当类型强制转换可能失败或丢失某些数据时，需要显示强制转换。c#允许定义自己的数据类型（结构和类）。")]),s._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implicit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Currency")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//定义强制类型转换")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticStyle:{float:"left width:100%"}},[a("div",{staticStyle:{float:"left"}},[a("a",{attrs:{href:"021601.html"}},[s._v("←泛型")])]),s._v(" "),a("div",{staticStyle:{float:"right"}},[a("a",{attrs:{href:"022602.html"}},[s._v("运算符和类型强制转换→")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);